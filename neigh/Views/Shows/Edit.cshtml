@model neigh.Models.ShowModel

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Show</h4>
        @Html.HiddenFor(model => model.Id)
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.Type, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Level, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.Level, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Level, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.StartDate, "{0:d}", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.EndDate, "{0:d}", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
            </div>
        </div>

        <ng-app ng-app="app" ng-controller="JudgesController">
            <div class="form-group" data-judge="true" ng-repeat="judge in judges track by $index">
                <label ng-attr="{for: '\'txtJudge\' + $index'}" class="control-label col-md-2">{{'Judge ' + ($index + 1)}}</label>
                <div class="col-md-10">
                    <input type="text" class="form-control" ng-attr="{id:'\'txtJudge\' + $index', name:'\'Judges[\' + $index + \']\''}" ng-model="judge"/>
                    <a ng-show="$index == judges.length - 1" href="javascript: void(0)" ng-click="newJudge()">Add Another Judge</a>
                    <a ng-show="$index != judges.length - 1" href="javascript:void(0)" ng-click="removeJudge($index)">Remove Judge</a>
                </div>
            </div>
        </ng-app>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Update" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/angular")

    <script type="text/javascript">
        app.constant('modelJudges', @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Judges)));

        app.controller("JudgesController", ['$scope', 'modelJudges', function ($scope, modelJudges) {
            $scope.judges = modelJudges;
            $scope.newJudge = function () {
                $scope.judges.push("");
            };
            $scope.removeJudge = function (index) {
                $scope.judges.splice(index, 1);
            }
        }]);
    </script>
}
